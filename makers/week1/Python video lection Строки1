String. Функции и методы строк
Строки в Python - набор последовательных символов, используемые для хранения и представления текстовой информации. Поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме.

Строки являются неизменяемыми типами данных, поэтому все строковые методы возвращают новую строку. Со строками можно проводить следующие операции:

Конкатенация (сложение)
S1 = 'spam'
S2 = 'eggs'
print(S1 + S2)
 #'spameggs' 
Дублирование строки
print('spam' * 3) 
#spamspamspam 
Длина строки (функция len)
len('spam')
#4 
Доступ по индексу
S = 'spam'
print(S[0])
#'s' 
Извлечение среза
Оператор извлечения среза: [X:Y]. X – начало среза, а Y – окончание. Символ с номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине строки.

s = 'spameggs'
print(s[3:5])
#'me' 
print(s[2:-2])
#'ameg' 
Кроме того, можно задать шаг, с которым нужно извлекать срез.

print(s[::-1])
#'sggemaps' 
print(s[3:5:-1])
#'' 
print(s[2::2])
#'aeg' 
Некоторые функции и методы строк
find(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или -1
rfind(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
index(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
rindex(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
replace(шаблон, замена) - Замена шаблона
split(символ) - Разбиение строки по разделителю
upper() - Преобразование строки к верхнему регистру
lower() - Преобразование строки к нижнему регистру swapcase() - Переводит символы нижнего регистра в верхний, а верхнего – в нижний
startswith(str) - Начинается ли строка с шаблона str
title() - Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний
endswith(str) - Заканчивается ли строка S шаблоном str
isdigit() - Состоит ли строка из цифр
isalpha() - Состоит ли строка из букв
isalnum() - Состоит ли строка из цифр или букв
islower() - Состоит ли строка из символов в нижнем регистре
isupper() - Состоит ли строка из символов в верхнем регистре
isspace() - Состоит ли строка из неотображаемых символов (пробелов, табуляции)
istitle() - Начинаются ли слова в строке с заглавной буквы
Форматирование строк
Подстановку данных в строки можно осуществить с помощью форматирования строк.

format
format() возвращает отформатированную версию строки, заменяя идентификаторы в фигурных скобках. Идентификаторы могут быть позиционными, числовыми индексами, ключами словарей, именами переменных.

Аргументов в format() может быть больше, чем идентификаторов в строке. В таком случае оставшиеся игнорируются.

name = 'Steve'
hello = 'Hello, {}'.format(name)
print(hello)
# Hello, Steve 
f'string
внутри f-строки в паре фигурных скобок указываются имена переменных, которые надо подставить:

name = John
surname = Snow
print(f"{name},{surname}")
# John, Snow 
%
Структура данного типа форматирования выглядит так:

print('Hello, %s!' % 'Vasya')
#'Hello, Vasya!' 
где %s является местом форматирования, и s типом данных, в данном случае строкой, переменная задается рядом с форматируемой строкой, тем же знаком %
