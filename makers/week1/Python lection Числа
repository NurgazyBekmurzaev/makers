http://Pythontutor.com

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!


https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html


Переменные

В Python переменная это это ссылка на какой-то объект. Допустим у вас в памяти хранятся какие то объекты и вы просто привязываете к ним переменные. Причем к одному объекту можно привязывать несколько различные переменные и обе они будут указывать на один и тот же объект.

Однако любые изменения которые вы сделаете с этим объектом обращаясь к нему по одному имени, также будут доступны когда вы обращаетесь к нему по другому имени.

Для того, чтобы посмотреть на объект с каким идентификатором ссылается данная переменная, можно использовать функцию id().

a = 4
b = 5

print(id(a))
# 4549865696 
print(id(b))
# 4549865728 
a = b
print(id(a))
# 4549865728 

Данные и их типы

В Python существует множество различных типов данных, которые подразделяются на категории: числа, последовательности, словари, наборы.

    boolean - логическое значение True или False
    int - представляет целое число, например, 1, 4, 8, 50.
    float - представляет число с плавающей точкой, например, 1.2 или 34.76
    complex - комплексные числа
    str - строки, например hello, Makers. В Python 3.x строки представляют набор символов в кодировке Unicode
    bytes - последовательность чисел в диапазоне 0-255
    byte array - массив байтов, аналогичен bytes с тем отличием, что может изменяться
    list - список
    tuple - кортеж
    set - неупорядоченная коллекция уникальных объектов
    frozen set - то же самое, что и set, только не может изменяться (immutable)
    dict - словарь, где каждый элемент имеет ключ и значение

Изменяемые и неизменяемые типы данных

В Python существуют изменяемые и неизменяемые типы. К неизменяемым (immutable) типам относятся:

    целые числа (int),
    числа с плавающей точкой (float), * комплексные числа (complex),
    логические переменные (bool),
    кортежи (tuple),
    строки (str),
    неизменяемые множества (frozen set).

К изменяемым (mutable) типам относятся:

    списки (list),
    множества (set),
    словари (dict).

Как уже было сказано ранее, при создании переменной, вначале создается объект, который имеет уникальный идентификатор, тип и значение, после этого переменная может ссылаться на созданный объект.

Неизменяемость типа данных означает, что созданный объект больше не изменяется. Например, если мы объявим переменную k = 15, то будет создан объект со значением 15, типа int и идентификатором, который можно узнать с помощью функции id().

k = 15

print(id(k))
# 4549866048 

print(type(k))
# <class 'int'> 

Объект с id = 4549866048 будет иметь значение 15 и изменить его уже нельзя.

Если тип данных изменяемый, то можно менять значение объекта. Например, создадим список [1, 2], а потом заменим второй элемент на 3.

a = [1, 2, 3, 4, 5]
print(a)
# [1, 2, 3, 4, 5] 

print(id(a))
# 4551471432 

a[0] = 3

print(a)
# [3, 2, 3, 4, 5] 

print(id(a))
# 4551471432 

Как видно, объект на который ссылается переменная a, был изменен. В рассмотренном случае, в качестве данных списка, выступают не объекты, а отношения между объектами. Т.е. в переменной a хранятся ссылки на объекты содержащие числа 1 и 3, а не непосредственно сами эти числа
Типы данных. Numbers

Числовой тип данных в Python предназначен для хранения числовых значений. Это неизменяемый тип данных, что означает, что изменение значения числового типа данных приведет к созданию нового объекта в памяти (и удалению старого).

Присвоив переменной num1 значение 33, мы создаем числовой объект, а с помощью записи del num1 можем удалить его.

В Python есть четыре вида числового типа данных:

    int (целое число)
    long (длинное целое число [может быть представлено в восьмеричной или шестнадцатеричной системе исчисления])
    float (число с плавающей точкой: -0.2, 0.0, 3.14159265 и т.д.)
    complex (комплексное число)

Целые числа int

Числа в Python 3 ничем не отличаются от обычных чисел. Они поддерживают набор самых обычных математических операций:

    x + y - Сложение
    x - y - Вычитание
    x * y - Умножение
    x / y - Деление
    x // y - Получение целой части от деления
    x % y - Остаток от деления
    -x - Смена знака числа
    abs(x) - Модуль числа
    divmod(x, y) - Пара (x // y, x % y)
    x ** y - Возведение в степень
    pow(x, y[, z]) - xy по модулю (если модуль задан)
    
    
    
    """
  По теме: Числа
"""
"""
1) Напишите программу, которая просит пользователя ввести последовательно день своего рождения, затем месяц и в конце год рождения. На выходе программа должна выдавать вам сумму введенных чисел.

Пример:
Ввод: День рождения: 7
          Месяц рождения: 12
          Год рождения: 1998
Вывод: 2017
"""
#писать код здесь
num5 = int(input ("date of birth: "))
num6 = int(input ("month of birth: "))
num7 = int(input ("year of birth: "))
result = num5 + num6 +num7
print (result)

"""
2) Makers Bootcamp предоставляет скидки на обучение. Стоимость всего обучения без учета скидок составляет 600$. Напишите программу, которая будет принимать скидку на обучение и после выдавать вам сумму, которую вам остается оплатить за курс.

Примечание: при вводе не надо указывать знак %

Пример:
Ввод: Введите скидку: 7
Вывод: Оставшаяся сумма для платежа составляет 558$
"""
#писать код здесь
num4 = 600
num5 = int(input ("Введите скидку: "))
result = (600 - (num4 * num5)/100)
print("Оставшаяся сумма для платежа составляет", result) 


"""
3) Найдите площадь и длину круга по введенным пользователем данным. Округлите полученные числа до сотых (два знака после точки)

Примечание: Формула площади круга: πr2
Формула длины круга: 2πr, где r - радиус круга

Пример:
Ввод: Введите радиус круга: 7
Вывод: Площадь круга составляет 153.94
Длина круга составляет 43.98
"""
#писать код здесь
num6 = int(input ("Введите радиус круга: "))
num7 = 3.14159
result1 = round(num7 * (num6 * num6),2)
result2 = round((2 * (num6 * num7)),2)
print ("Площадь круга составляет: ", result1, "Длина круга составляет: ", result2)


https://replit.com/@NurgazyBekmurza/week-1-cw-tasks-02#main.py


    
    
    

